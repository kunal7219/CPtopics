#include <bits/stdc++.h>
using namespace std;
#define ll long long

class segmentTree{
    public: 
    vector<ll> seg;
    segmentTree(int n){
        seg.resize(4*n+1);
    }
    void build(int i,int low,int high,int a[]){
        if(low==high){
            seg[i]=a[low];
            return;
        }
        ll mid = (low+high)/2;

        build(2*i+1,low,mid,a);
        build(2*i+2,mid+1,high,a);

        seg[i]=seg[2*i+1]+seg[2*i+2];
        return;
    }
    void update(int i,int ind,int low,int high,int val){
        if(low==high){
            seg[ind]=val;
            return;
        }
        int mid=(low+high)/2;
        if(i<=mid){
            update(i,2*ind+1,low,mid,val);
        }
        else{
            update(i,2*ind+2,mid+1,high,val);
        }
        seg[ind] = seg[2*ind+1]+seg[2*ind+2]; 
    }
    int query(int ind,int low,int high,int l,int r){
        // l r low high or low high l r
        // NO overlapping
        if(r<low || high <l){
            // In Sum Case
            return 0;
        }
        // Complete Overlapping
        // l low high r
        if(l<=low && high<=r){
            return seg[ind];
        }
        // partially
        int mid =( low+ high)/2;
        int left = query(2*ind+1,low,mid,l,r);
        int right = query(2*ind+2,mid+1,high,l,r);
        return left+right;
    }
};

/* Main()  function */
int main()
{
	int t;
	cin>>t;
	while(t--){
        int n;
        cin>>n;
        segmentTree s(n);
        int a[n];
        for(int i=0;i<n;i++){
            cin>>a[i];
        }
        s.build(0,0,n-1,a);
        // l r 
        // for Query->ind low high l r 
        // a[i]=x;
        // update -> i ind low high x 
        
	}
	return 0;
}
