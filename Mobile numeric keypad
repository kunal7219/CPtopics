long long dp[10][5*10000+1];
long long solve(int i,int j,int n,int pad[4][3]){
    if(n==1){
        return 1;
    }
    if(dp[pad[i][j]][n]!=-1){
        return dp[pad[i][j]][n];
    }
    long long a=0,b=0,c=0,d=0,e=0;
    a=solve(i,j,n-1,pad);
    if(pad[i][j-1]!=-1 && j-1>=0 )b =solve(i,j-1,n-1,pad);
    if(pad[i-1][j]!=-1 && i-1>=0) c=solve(i-1,j,n-1,pad);
    if(pad[i+1][j]!=-1 && i+1<4) d=solve(i+1,j,n-1,pad);
    if(pad[i][j+1]!=-1 && j+1<3)e =solve(i,j+1,n-1,pad);
    return dp[pad[i][j]][n]=a+b+c+d+e;

} 
	long long getCount(int n)
	{
		long long ans=0;
    dp[10][n+1];
    memset(dp,-1,sizeof(dp));
    int pad[4][3]={{1,2,3},{4,5,6},{7,8,9},{-1,0,-1}};
    pad[3][1]=0;
    for(int i=0;i<4;i++){
        for(int j=0;j<3;j++){
            if(pad[i][j]!=-1){
                ans+=solve(i,j,n,pad);
            }
        }
    }
    return ans;
	}
