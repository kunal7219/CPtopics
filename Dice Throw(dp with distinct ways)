int mod = 1e9 + 7;
class Solution {
    private:
    int solve(int dice,int k,int target,vector<vector<int>>& dp){
        if(dice==0 && target!=0){
            return 0;
        }
        if(dice!=0 && target==0){
            return 0;
        }
        if(dice==0 && target==0){
            return 1;
        }
        if(dp[dice][target]!=-1){
            return dp[dice][target];
        }
        int ans=0;
        for(int roll =1;roll<=k;roll++){
            if(target-roll>=0)
            ans = (ans+solve(dice-1,k,target-roll,dp))%mod;
        }
        return dp[dice][target]=ans;
    }
    int solveTab(int n, int k, int target){
        vector<vector<int>> dp(n+1,vector<int>(target+1,0));
        dp[0][0]=1;
        for(int dice=1;dice<=n;dice++){
            for(int tar =1;tar<=target;tar++){
                int ans=0;
                for(int roll =1;roll<=k;roll++){
                if(tar-roll>=0)
                ans = (ans+dp[dice-1][tar-roll])%mod;
                }
                            dp[dice][tar]=ans;    
            }
        }
        return dp[n][target];
    }
    int solveSpaceOP(int n, int k, int target){
        vector<int> curr(target+1,0);
        vector<int> prev(target+1,0);
        prev[0]=1;
        for(int dice=1;dice<=n;dice++){
            for(int tar =1;tar<=target;tar++){
                int ans=0;
                for(int roll =1;roll<=k;roll++){
                if(tar-roll>=0)
                ans = (ans+prev[tar-roll])%mod;
                }
                curr[tar]=ans;    
            }
            prev=curr;
        }
        return curr[target];
    }
public:
    int numRollsToTarget(int n, int k, int target) {
        vector<vector<int>> dp(n+1,vector<int>(target+1,-1));
        //return solve(n,k,target,dp);

        //return solveTab(n,k,target);

        return solveSpaceOP(n,k,target);
    }
};
