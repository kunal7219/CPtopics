class Solution {
    private:
    int fun(int i,int time,int n,vector<int>& s,int& ans,vector<vector<int>>& dp){
        if(i>=(n)){
            return 0;
        }
        if(dp[i][time]!=-1){
            return dp[i][time];
        }
        int op1 = time*s[i] + fun(i+1,time+1,n,s,ans,dp);
        int op2 = fun(i+1,time,n,s,ans,dp);

        return dp[i][time] = max(op1,op2);
    }
public:
    int maxSatisfaction(vector<int>& s) {
        sort(s.begin(),s.end());
        int ans=0;
        int n=s.size();
        vector<vector<int>> dp(n+1,vector<int>(n+1,-1));
        return fun(0,1,n,s,ans,dp);
    }
};
// tabulation
public:
    int maxSatisfaction(vector<int>& s) {
        sort(s.begin(),s.end());
        int ans=0;
        int n=s.size();
        vector<vector<int>> dp(n+1,vector<int>(n+1,0));
        // dp-> i,time
        for(int i=n-1;i>=0;i--){
            for(int time=i;time>=0;time--){
        int op1 = (time+1)*s[i] + dp[i+1][time+1];
        int op2 = dp[i+1][time];

        dp[i][time] = max(op1,op2);
            }
        }
        return dp[0][0];
    }
};

// Space Optimization
public:
    int maxSatisfaction(vector<int>& s) {
        sort(s.begin(),s.end());
        int ans=0;
        int n=s.size();
        vector<int> curr(n+1,0);
        vector<int> next(n+1,0);
        // dp-> i,time
        for(int i=n-1;i>=0;i--){
            for(int time=i;time>=0;time--){
        int op1 = (time+1)*s[i] + next[time+1];
        int op2 = next[time];

        curr[time] = max(op1,op2);
            }
            next=curr;
        }
        
        return next[0];
    }
};
// greedy 
class Solution {
public:
    int maxSatisfaction(vector<int>& satisfaction) {
        sort(satisfaction.begin(), satisfaction.end());
        int n = satisfaction.size(), ans = 0, preSum = 0, timeCoefficient = 0;
        for (int i = n-1; i >= 0; i--) {
            if (preSum + satisfaction[i] <= 0) {
                break;
            }
            preSum += satisfaction[i];
            timeCoefficient += preSum;
            ans = max(ans, timeCoefficient);
        }
        return ans;
    }
};
