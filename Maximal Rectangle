class Solution {
    private:
    vector<int> nextSmallerElement(vector<int> &arr, int n)
{
    vector<int> ans(n);
    stack<int> s;
    s.push(-1);
    for(int i=n-1;i>=0;i--){
        int curr = arr[i];
        while(s.top()!=-1 && arr[s.top()]>= curr){
            s.pop();
        }
        ans[i]=s.top();
        s.push(i);
    }
    return ans;
}
    vector<int> backSmallerElement(vector<int> &arr, int n)
{
    vector<int> ans(n);
    
    stack<int> s;
    s.push(-1);
    for(int i=0;i<n;i++){
        int curr = arr[i];
        while(s.top()!=-1 && arr[s.top()]>= curr){
            s.pop();
        }
        ans[i]=s.top();
        s.push(i);
    }
    return ans;
}
int solve(vector<int>& heights,int n) {

        vector<int> prev(n);
        vector<int> next(n);
        prev=backSmallerElement(heights,n);
        next=nextSmallerElement(heights,n);

        int ans = 0;
        for(int i=0;i<n;i++){
            int l=heights[i];
            if(next[i]==-1){
                next[i]=n;
            }
            int b = next[i]-prev[i]-1;

            ans = max(ans,l*b);
        }
        return ans;
    }
public:
    int maximalRectangle(vector<vector<char>>& matrix) {
        int n=matrix.size();
        int m=matrix[0].size();
        int maxi=0;
        vector<int> ans(m,0);
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(matrix[i][j]=='1'){
                    ans[j]++;
                }
                else{
                    ans[j]=0;
                }
            }
            maxi= max(maxi,solve(ans,m));
        }
        return maxi;
    }
};
