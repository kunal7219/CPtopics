class Solution {
    private:
    int solveMem(int i,int n,int hold,vector<int>& prices,vector<vector<int>>& dp){
        if(i>=n){
            return 0;
        }
        if(dp[i][hold]!=-1){
            return dp[i][hold];
        }
        // hold what you have
        int op1 = solveMem(i+1,n,hold,prices,dp);
        int op2 = INT_MIN,op3=INT_MIN;
        if(hold==0){
            // buying
            op2 = -prices[i] + solveMem(i+1,n,1,prices,dp); 
        }
        else{
            // selling
            op3 = prices[i] + solveMem(i+1,n,0,prices,dp);
        }
        return dp[i][hold]=max({op1,op2,op3});
    }
    int solveTab(vector<int>& prices){
        int n=prices.size();
        vector<vector<int>> dp(n+1,vector<int>(2,0));
        for(int i=n-1;i>=0;i--){
            for(int hold=0;hold<=1;hold++){
                int op1 = dp[i+1][hold];
                int op2 = INT_MIN,op3=INT_MIN;
                if(hold==0){
                // buying
                op2 = -prices[i] + dp[i+1][1]; 
                }
                else{
                // selling
                op3 = prices[i] + dp[i+1][0];
                }
                dp[i][hold]=max({op1,op2,op3});
            }
        }
        return dp[0][0];
    }
    int solveSpaceOP(vector<int>& prices){
        int n=prices.size();
        vector<int> curr(2,0);
        vector<int> next(2,0);

        for(int i=n-1;i>=0;i--){
            for(int hold=0;hold<=1;hold++){
                int op1 = next[hold];
                int op2 = INT_MIN,op3=INT_MIN;
                if(hold==0){
                // buying
                op2 = -prices[i] + next[1]; 
                }
                else{ 
                // selling
                op3 = prices[i] + next[0];
                }
                curr[hold]=max({op1,op2,op3});
            }
            next=curr;
        }
        return curr[0];
    }
public:
    int maxProfit(vector<int>& prices){
        int n=prices.size();
        int hold = 0;
        //vector<vector<int>> dp(n+1,vector<int>(2,-1));
        //return solveMem(0,n,hold,prices,dp);

        //return solveTab(prices);

        return solveSpaceOP(prices);
    }
};
