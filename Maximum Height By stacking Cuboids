class Solution {
    private:
    bool check(vector<int> base ,vector<int> nextBox){
        if(nextBox[0]<=base[0] && nextBox[1]<=base[1] && nextBox[2]<=base[2]){
            return true;
        }
        return false;

    }
        int solveSpaceOP(int n,vector<vector<int>>& a){
       
        vector<int> currRow(n+1, 0);
        vector<int> nextRow(n+1, 0);
        
        for(int curr = n-1; curr>=0; curr--){
            for(int prev = curr-1; prev>=-1; prev--){
                
                // include
                int take = 0;
                if(prev == -1 || check(a[curr],a[prev]))
                    take = a[curr][2] + nextRow[curr+1];
                    
                // exclude
                int notTake = 0 + nextRow[prev+1];
                
                currRow[prev+1] = max(take, notTake);
            }
            
            nextRow = currRow;
        }
        
        return nextRow[0];
    }
public:
    int maxHeight(vector<vector<int>>& cuboids) {
        // width length height by can rotate
        for(int i=0;i<cuboids.size();i++)
        sort(cuboids[i].begin(),cuboids[i].end());

        // (l,w,h) or (w,l,h) ->  greedy for height max
        // sort again by width
        sort(cuboids.begin(),cuboids.end());

        // step 3 use LIS logic
        return solveSpaceOP(cuboids.size(),cuboids);

    }
};
